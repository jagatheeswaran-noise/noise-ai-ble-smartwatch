package com.zjw.sdkdemo.adapter;import android.annotation.SuppressLint;import android.content.Context;import android.text.TextUtils;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.BaseAdapter;import android.widget.TextView;import com.blankj.utilcode.util.GsonUtils;import com.zhapp.ble.bean.ScanDeviceBean;import com.zjw.sdkdemo.R;import com.zjw.sdkdemo.app.MyApplication;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;public class LeDeviceListAdapter extends BaseAdapter {    static class ViewHolder {        TextView deviceName;        TextView deviceAddress;        TextView tv_bind;        TextView tv_user_mode;        TextView tv_has_bind;        TextView tv_support_bt;        TextView tv_bt_bond;        TextView tv_bt_broadcast;        TextView tv_bt_mac;        TextView tv_version;        TextView tv_protocol;    }    private ArrayList<ScanDeviceBean> mLeDevices;    private LayoutInflater mInflator;    public LeDeviceListAdapter(Context context) {        super();        this.mInflator = LayoutInflater.from(context);        mLeDevices = new ArrayList<>();    }    public String addDevice(ScanDeviceBean device) {        if (getIsRepeat(mLeDevices, device)) {            mLeDevices.add(0, device);            Collections.sort(mLeDevices, new Comparator<ScanDeviceBean>() {                @Override                public int compare(ScanDeviceBean o1, ScanDeviceBean o2) {                    int num1 = o1.rssi;                    int num2 = o2.rssi;                    int aa = 0;                    if (num2 > num1) {                        aa = num2 - num1;                    }                    if (num2 < num1) {                        aa = num2 - num1;                    }                    return aa;                }            });            return device.address;        } else {            return "";        }    }    public void clearAll() {        mLeDevices.clear();    }    boolean getIsRepeat(ArrayList<ScanDeviceBean> list_device, ScanDeviceBean device) {        boolean result = true;        for (int i = 0; i < list_device.size(); i++) {            if (list_device.get(i).address.equals(device.address) && TextUtils.equals(list_device.get(i).deviceType, device.deviceType)) {                return false;            }        }        return result;    }    public ScanDeviceBean getDevice(int position) {        return mLeDevices.get(position);    }    public void clear() {        mLeDevices.clear();    }    @Override    public int getCount() {        return mLeDevices.size();    }    @Override    public Object getItem(int i) {        return mLeDevices.get(i);    }    @Override    public long getItemId(int i) {        return i;    }    @SuppressLint({"ResourceAsColor", "SetTextI18n"})    @Override    public View getView(int i, View view, ViewGroup viewGroup) {        ViewHolder viewHolder;        /* General ListView optimization code. */        if (view == null) {            view = mInflator.inflate(R.layout.listitem_device, null);            viewHolder = new ViewHolder();            viewHolder.deviceAddress = (TextView) view.findViewById(R.id.device_address);            viewHolder.deviceName = (TextView) view.findViewById(R.id.device_name);            viewHolder.tv_bind = (TextView) view.findViewById(R.id.tv_bind);            viewHolder.tv_user_mode = (TextView) view.findViewById(R.id.tv_user_mode);            viewHolder.tv_has_bind = (TextView) view.findViewById(R.id.tv_has_bind);            viewHolder.tv_support_bt = (TextView) view.findViewById(R.id.tv_support_bt);            viewHolder.tv_bt_bond = (TextView) view.findViewById(R.id.tv_bt_bond);            viewHolder.tv_bt_broadcast = (TextView) view.findViewById(R.id.tv_bt_broadcast);            viewHolder.tv_bt_mac = (TextView) view.findViewById(R.id.tv_bt_mac);            viewHolder.tv_version = (TextView) view.findViewById(R.id.tv_version);            viewHolder.tv_protocol = (TextView) view.findViewById(R.id.tv_protocol);            view.setTag(viewHolder);        } else {            viewHolder = (ViewHolder) view.getTag();        }        ScanDeviceBean device = mLeDevices.get(i);        if (!TextUtils.isEmpty(device.deviceType)) {            viewHolder.deviceAddress.setText(device.address);            viewHolder.deviceName.setText(device.name);            viewHolder.tv_protocol.setVisibility(View.VISIBLE);            viewHolder.tv_version.setVisibility(View.VISIBLE);            viewHolder.tv_bind.setVisibility(View.VISIBLE);            viewHolder.tv_user_mode.setVisibility(View.VISIBLE);            viewHolder.tv_has_bind.setVisibility(View.VISIBLE);            viewHolder.tv_support_bt.setVisibility(View.VISIBLE);            viewHolder.tv_bt_bond.setVisibility(View.VISIBLE);            viewHolder.tv_bt_broadcast.setVisibility(View.VISIBLE);            viewHolder.tv_bt_mac.setVisibility(View.VISIBLE);            viewHolder.tv_protocol.setText(GsonUtils.toJson(device));            viewHolder.tv_version.setText(device.deviceVersionName);            viewHolder.tv_bind.setText(MyApplication.context.getString(R.string.s312) + " : " + device.isBind);            viewHolder.tv_user_mode.setText(MyApplication.context.getString(R.string.s313) + " : " + device.isUserMode);            //Whether to support direct connection binding (whether the device displays a confirmation binding interface)            viewHolder.tv_has_bind.setText(MyApplication.context.getString(R.string.s314) + " : " + device.hasBindingFunction);            viewHolder.tv_support_bt.setText(MyApplication.context.getString(R.string.s315) + " : " + device.isSupportHeadset);            viewHolder.tv_bt_bond.setText(MyApplication.context.getString(R.string.s316) + " : " + device.isHeadsetBond);            viewHolder.tv_bt_broadcast.setText(MyApplication.context.getString(R.string.s317) + " : " + device.isHeadsetBroadcast);            viewHolder.tv_bt_mac.setText(MyApplication.context.getString(R.string.s318) + " : " + device.headsetMac);        } else {            viewHolder.deviceAddress.setText(device.address);            viewHolder.deviceName.setText(device.name);            viewHolder.tv_protocol.setVisibility(View.GONE);            viewHolder.tv_version.setVisibility(View.GONE);            viewHolder.tv_bind.setVisibility(View.GONE);            viewHolder.tv_user_mode.setVisibility(View.GONE);            viewHolder.tv_has_bind.setVisibility(View.GONE);            viewHolder.tv_support_bt.setVisibility(View.GONE);            viewHolder.tv_bt_bond.setVisibility(View.GONE);            viewHolder.tv_bt_broadcast.setVisibility(View.GONE);            viewHolder.tv_bt_mac.setVisibility(View.GONE);        }        return view;    }}